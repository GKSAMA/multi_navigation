// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smoother_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/math/smoother_config.h"

#include <algorithm>
#include <iostream>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/dynamic_message.h>
#include <google/protobuf/compiler/importer.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SmootherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmootherConfig_reflection_ = NULL;

}  // namespace

bool SmootherConfig::SmootherConfigParser(const std::string &filename, 
                                          const std::string& classname,
                                          std::function<void(::google::protobuf::Message* msg)> cb)
{
  auto pos = filename.find_last_of('/');
  std::string path;
  std::string file;
  if(pos == std::string::npos){
    file = filename;
  } else {
    path = filename.substr(0, pos);
    file = filename.substr(pos + 1);
  }
  ::google::protobuf::compiler::DiskSourceTree sourceTree;
  sourceTree.MapPath("", path);
  ::google::protobuf::compiler::Importer importer(&sourceTree, NULL);
  importer.Import(file);
  const ::google::protobuf::Descriptor *descriptor = importer.pool()->FindMessageTypeByName(classname);
  if(!descriptor){
    std::cout << "cant find proto file" << std::endl;
    return false;
  }
  ::google::protobuf::DynamicMessageFactory factory;
  const ::google::protobuf::Message* message = factory.GetPrototype(descriptor);
  if(!message){
    std::cout << "cant Get Proto type" << std::endl;
    return false;
  }
  ::google::protobuf::Message *msg = message->New();
  if(!msg){
    return false;
  }
  cb(msg);
  delete msg;

  return true;
}

void protobuf_AssignDesc_smoother_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_smoother_5fconfig_2eproto() {
  protobuf_AddDesc_smoother_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "smoother_config.proto");
  GOOGLE_CHECK(file != NULL);
  if(file == NULL){
    std::cout << "cant find proto file" << std::endl;
  }
  SmootherConfig_descriptor_ = file->message_type(0);
  static const int SmootherConfig_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, weight_fem_pos_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, weight_ref_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, weight_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, apply_curvature_constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, weight_curvature_constraint_slack_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, curvature_constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, use_sqp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, sqp_ftol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, sqp_ctol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, sqp_pen_max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, sqp_sub_max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, time_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, verbose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, scaled_termination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, warm_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, print_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, max_num_of_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, acceptable_num_of_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, tol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, acceptable_tol_),
  };
  SmootherConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmootherConfig_descriptor_,
      SmootherConfig::default_instance_,
      SmootherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmootherConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_smoother_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmootherConfig_descriptor_, &SmootherConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_smoother_5fconfig_2eproto() {
  delete SmootherConfig::default_instance_;
  delete SmootherConfig_reflection_;
}

void protobuf_AddDesc_smoother_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_smoother_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025smoother_config.proto\"\247\005\n\016SmootherConf"
    "ig\022-\n\030weight_fem_pos_deviation\030\002 \001(\001:\01310"
    "000000000\022\037\n\024weight_ref_deviation\030\003 \001(\001:"
    "\0011\022\035\n\022weight_path_length\030\004 \001(\001:\0011\022)\n\032app"
    "ly_curvature_constraint\030\005 \001(\010:\005false\0222\n%"
    "weight_curvature_constraint_slack_var\030\006 "
    "\001(\001:\003100\022!\n\024curvature_constraint\030\007 \001(\001:\003"
    "0.2\022\026\n\007use_sqp\030\010 \001(\010:\005false\022\030\n\010sqp_ftol\030"
    "\t \001(\001:\0060.0001\022\027\n\010sqp_ctol\030\n \001(\001:\0050.001\022\034"
    "\n\020sqp_pen_max_iter\030\013 \001(\005:\00210\022\035\n\020sqp_sub_"
    "max_iter\030\014 \001(\005:\003100\022\025\n\010max_iter\030d \001(\005:\0035"
    "00\022\025\n\ntime_limit\030e \001(\001:\0010\022\026\n\007verbose\030f \001"
    "(\010:\005false\022 \n\022scaled_termination\030g \001(\010:\004t"
    "rue\022\030\n\nwarm_start\030h \001(\010:\004true\022\027\n\013print_l"
    "evel\030\310\001 \001(\005:\0010\022#\n\025max_num_of_iterations\030"
    "\311\001 \001(\005:\003500\022)\n\034acceptable_num_of_iterati"
    "ons\030\312\001 \001(\005:\00215\022\023\n\003tol\030\313\001 \001(\001:\0051e-08\022\034\n\016a"
    "cceptable_tol\030\314\001 \001(\001:\0030.1", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "smoother_config.proto", &protobuf_RegisterTypes);
  SmootherConfig::default_instance_ = new SmootherConfig();
  SmootherConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_smoother_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_smoother_5fconfig_2eproto {
  StaticDescriptorInitializer_smoother_5fconfig_2eproto() {
    protobuf_AddDesc_smoother_5fconfig_2eproto();
  }
} static_descriptor_initializer_smoother_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmootherConfig::kWeightFemPosDeviationFieldNumber;
const int SmootherConfig::kWeightRefDeviationFieldNumber;
const int SmootherConfig::kWeightPathLengthFieldNumber;
const int SmootherConfig::kApplyCurvatureConstraintFieldNumber;
const int SmootherConfig::kWeightCurvatureConstraintSlackVarFieldNumber;
const int SmootherConfig::kCurvatureConstraintFieldNumber;
const int SmootherConfig::kUseSqpFieldNumber;
const int SmootherConfig::kSqpFtolFieldNumber;
const int SmootherConfig::kSqpCtolFieldNumber;
const int SmootherConfig::kSqpPenMaxIterFieldNumber;
const int SmootherConfig::kSqpSubMaxIterFieldNumber;
const int SmootherConfig::kMaxIterFieldNumber;
const int SmootherConfig::kTimeLimitFieldNumber;
const int SmootherConfig::kVerboseFieldNumber;
const int SmootherConfig::kScaledTerminationFieldNumber;
const int SmootherConfig::kWarmStartFieldNumber;
const int SmootherConfig::kPrintLevelFieldNumber;
const int SmootherConfig::kMaxNumOfIterationsFieldNumber;
const int SmootherConfig::kAcceptableNumOfIterationsFieldNumber;
const int SmootherConfig::kTolFieldNumber;
const int SmootherConfig::kAcceptableTolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmootherConfig::SmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmootherConfig)
}

void SmootherConfig::InitAsDefaultInstance() {
}

SmootherConfig::SmootherConfig(const SmootherConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SmootherConfig)
}

void SmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  weight_fem_pos_deviation_ = 10000000000;
  weight_ref_deviation_ = 1;
  weight_path_length_ = 1;
  apply_curvature_constraint_ = false;
  weight_curvature_constraint_slack_var_ = 100;
  curvature_constraint_ = 0.2;
  use_sqp_ = false;
  sqp_ftol_ = 0.0001;
  sqp_ctol_ = 0.001;
  sqp_pen_max_iter_ = 10;
  sqp_sub_max_iter_ = 100;
  max_iter_ = 500;
  time_limit_ = 0;
  verbose_ = false;
  scaled_termination_ = true;
  warm_start_ = true;
  print_level_ = 0;
  max_num_of_iterations_ = 500;
  acceptable_num_of_iterations_ = 15;
  tol_ = 1e-08;
  acceptable_tol_ = 0.1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmootherConfig::~SmootherConfig() {
  // @@protoc_insertion_point(destructor:SmootherConfig)
  SharedDtor();
}

void SmootherConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmootherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmootherConfig_descriptor_;
}

const SmootherConfig& SmootherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smoother_5fconfig_2eproto();
  return *default_instance_;
}

SmootherConfig* SmootherConfig::default_instance_ = NULL;

SmootherConfig* SmootherConfig::New(::google::protobuf::Arena* arena) const {
  SmootherConfig* n = new SmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SmootherConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SmootherConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SmootherConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(apply_curvature_constraint_, use_sqp_);
    weight_fem_pos_deviation_ = 10000000000;
    weight_ref_deviation_ = 1;
    weight_path_length_ = 1;
    weight_curvature_constraint_slack_var_ = 100;
    curvature_constraint_ = 0.2;
    sqp_ftol_ = 0.0001;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    sqp_ctol_ = 0.001;
    sqp_pen_max_iter_ = 10;
    sqp_sub_max_iter_ = 100;
    max_iter_ = 500;
    time_limit_ = 0;
    verbose_ = false;
    scaled_termination_ = true;
    warm_start_ = true;
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    print_level_ = 0;
    max_num_of_iterations_ = 500;
    acceptable_num_of_iterations_ = 15;
    tol_ = 1e-08;
    acceptable_tol_ = 0.1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_fem_pos_deviation_)));
          set_has_weight_fem_pos_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_weight_ref_deviation;
        break;
      }

      // optional double weight_ref_deviation = 3 [default = 1];
      case 3: {
        if (tag == 25) {
         parse_weight_ref_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_ref_deviation_)));
          set_has_weight_ref_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_weight_path_length;
        break;
      }

      // optional double weight_path_length = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_weight_path_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_path_length_)));
          set_has_weight_path_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_apply_curvature_constraint;
        break;
      }

      // optional bool apply_curvature_constraint = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_apply_curvature_constraint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_curvature_constraint_)));
          set_has_apply_curvature_constraint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_weight_curvature_constraint_slack_var;
        break;
      }

      // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
      case 6: {
        if (tag == 49) {
         parse_weight_curvature_constraint_slack_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_curvature_constraint_slack_var_)));
          set_has_weight_curvature_constraint_slack_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_curvature_constraint;
        break;
      }

      // optional double curvature_constraint = 7 [default = 0.2];
      case 7: {
        if (tag == 57) {
         parse_curvature_constraint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_constraint_)));
          set_has_curvature_constraint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_use_sqp;
        break;
      }

      // optional bool use_sqp = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_use_sqp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sqp_)));
          set_has_use_sqp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_sqp_ftol;
        break;
      }

      // optional double sqp_ftol = 9 [default = 0.0001];
      case 9: {
        if (tag == 73) {
         parse_sqp_ftol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sqp_ftol_)));
          set_has_sqp_ftol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_sqp_ctol;
        break;
      }

      // optional double sqp_ctol = 10 [default = 0.001];
      case 10: {
        if (tag == 81) {
         parse_sqp_ctol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sqp_ctol_)));
          set_has_sqp_ctol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sqp_pen_max_iter;
        break;
      }

      // optional int32 sqp_pen_max_iter = 11 [default = 10];
      case 11: {
        if (tag == 88) {
         parse_sqp_pen_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqp_pen_max_iter_)));
          set_has_sqp_pen_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sqp_sub_max_iter;
        break;
      }

      // optional int32 sqp_sub_max_iter = 12 [default = 100];
      case 12: {
        if (tag == 96) {
         parse_sqp_sub_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqp_sub_max_iter_)));
          set_has_sqp_sub_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 100 [default = 500];
      case 100: {
        if (tag == 800) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_time_limit;
        break;
      }

      // optional double time_limit = 101 [default = 0];
      case 101: {
        if (tag == 809) {
         parse_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_limit_)));
          set_has_time_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_verbose;
        break;
      }

      // optional bool verbose = 102 [default = false];
      case 102: {
        if (tag == 816) {
         parse_verbose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verbose_)));
          set_has_verbose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_scaled_termination;
        break;
      }

      // optional bool scaled_termination = 103 [default = true];
      case 103: {
        if (tag == 824) {
         parse_scaled_termination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scaled_termination_)));
          set_has_scaled_termination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_warm_start;
        break;
      }

      // optional bool warm_start = 104 [default = true];
      case 104: {
        if (tag == 832) {
         parse_warm_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warm_start_)));
          set_has_warm_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1600)) goto parse_print_level;
        break;
      }

      // optional int32 print_level = 200 [default = 0];
      case 200: {
        if (tag == 1600) {
         parse_print_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_level_)));
          set_has_print_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_max_num_of_iterations;
        break;
      }

      // optional int32 max_num_of_iterations = 201 [default = 500];
      case 201: {
        if (tag == 1608) {
         parse_max_num_of_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_iterations_)));
          set_has_max_num_of_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1616)) goto parse_acceptable_num_of_iterations;
        break;
      }

      // optional int32 acceptable_num_of_iterations = 202 [default = 15];
      case 202: {
        if (tag == 1616) {
         parse_acceptable_num_of_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptable_num_of_iterations_)));
          set_has_acceptable_num_of_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1625)) goto parse_tol;
        break;
      }

      // optional double tol = 203 [default = 1e-08];
      case 203: {
        if (tag == 1625) {
         parse_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tol_)));
          set_has_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1633)) goto parse_acceptable_tol;
        break;
      }

      // optional double acceptable_tol = 204 [default = 0.1];
      case 204: {
        if (tag == 1633) {
         parse_acceptable_tol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceptable_tol_)));
          set_has_acceptable_tol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SmootherConfig)
  return false;
#undef DO_
}

void SmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SmootherConfig)
  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  if (has_weight_fem_pos_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_fem_pos_deviation(), output);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (has_weight_ref_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_ref_deviation(), output);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (has_weight_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_path_length(), output);
  }

  // optional bool apply_curvature_constraint = 5 [default = false];
  if (has_apply_curvature_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->apply_curvature_constraint(), output);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (has_weight_curvature_constraint_slack_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_curvature_constraint_slack_var(), output);
  }

  // optional double curvature_constraint = 7 [default = 0.2];
  if (has_curvature_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature_constraint(), output);
  }

  // optional bool use_sqp = 8 [default = false];
  if (has_use_sqp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_sqp(), output);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (has_sqp_ftol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sqp_ftol(), output);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (has_sqp_ctol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sqp_ctol(), output);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (has_sqp_pen_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sqp_pen_max_iter(), output);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (has_sqp_sub_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sqp_sub_max_iter(), output);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->max_iter(), output);
  }

  // optional double time_limit = 101 [default = 0];
  if (has_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->time_limit(), output);
  }

  // optional bool verbose = 102 [default = false];
  if (has_verbose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->verbose(), output);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (has_scaled_termination()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->scaled_termination(), output);
  }

  // optional bool warm_start = 104 [default = true];
  if (has_warm_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->warm_start(), output);
  }

  // optional int32 print_level = 200 [default = 0];
  if (has_print_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->print_level(), output);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (has_max_num_of_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->max_num_of_iterations(), output);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (has_acceptable_num_of_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->acceptable_num_of_iterations(), output);
  }

  // optional double tol = 203 [default = 1e-08];
  if (has_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(203, this->tol(), output);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (has_acceptable_tol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(204, this->acceptable_tol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SmootherConfig)
}

::google::protobuf::uint8* SmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmootherConfig)
  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  if (has_weight_fem_pos_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_fem_pos_deviation(), target);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (has_weight_ref_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_ref_deviation(), target);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (has_weight_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_path_length(), target);
  }

  // optional bool apply_curvature_constraint = 5 [default = false];
  if (has_apply_curvature_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->apply_curvature_constraint(), target);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (has_weight_curvature_constraint_slack_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_curvature_constraint_slack_var(), target);
  }

  // optional double curvature_constraint = 7 [default = 0.2];
  if (has_curvature_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature_constraint(), target);
  }

  // optional bool use_sqp = 8 [default = false];
  if (has_use_sqp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_sqp(), target);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (has_sqp_ftol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sqp_ftol(), target);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (has_sqp_ctol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sqp_ctol(), target);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (has_sqp_pen_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sqp_pen_max_iter(), target);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (has_sqp_sub_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sqp_sub_max_iter(), target);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->max_iter(), target);
  }

  // optional double time_limit = 101 [default = 0];
  if (has_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->time_limit(), target);
  }

  // optional bool verbose = 102 [default = false];
  if (has_verbose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->verbose(), target);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (has_scaled_termination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->scaled_termination(), target);
  }

  // optional bool warm_start = 104 [default = true];
  if (has_warm_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->warm_start(), target);
  }

  // optional int32 print_level = 200 [default = 0];
  if (has_print_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->print_level(), target);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (has_max_num_of_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (has_acceptable_num_of_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->acceptable_num_of_iterations(), target);
  }

  // optional double tol = 203 [default = 1e-08];
  if (has_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(203, this->tol(), target);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (has_acceptable_tol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(204, this->acceptable_tol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmootherConfig)
  return target;
}

int SmootherConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SmootherConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
    if (has_weight_fem_pos_deviation()) {
      total_size += 1 + 8;
    }

    // optional double weight_ref_deviation = 3 [default = 1];
    if (has_weight_ref_deviation()) {
      total_size += 1 + 8;
    }

    // optional double weight_path_length = 4 [default = 1];
    if (has_weight_path_length()) {
      total_size += 1 + 8;
    }

    // optional bool apply_curvature_constraint = 5 [default = false];
    if (has_apply_curvature_constraint()) {
      total_size += 1 + 1;
    }

    // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
    if (has_weight_curvature_constraint_slack_var()) {
      total_size += 1 + 8;
    }

    // optional double curvature_constraint = 7 [default = 0.2];
    if (has_curvature_constraint()) {
      total_size += 1 + 8;
    }

    // optional bool use_sqp = 8 [default = false];
    if (has_use_sqp()) {
      total_size += 1 + 1;
    }

    // optional double sqp_ftol = 9 [default = 0.0001];
    if (has_sqp_ftol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double sqp_ctol = 10 [default = 0.001];
    if (has_sqp_ctol()) {
      total_size += 1 + 8;
    }

    // optional int32 sqp_pen_max_iter = 11 [default = 10];
    if (has_sqp_pen_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqp_pen_max_iter());
    }

    // optional int32 sqp_sub_max_iter = 12 [default = 100];
    if (has_sqp_sub_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqp_sub_max_iter());
    }

    // optional int32 max_iter = 100 [default = 500];
    if (has_max_iter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional double time_limit = 101 [default = 0];
    if (has_time_limit()) {
      total_size += 2 + 8;
    }

    // optional bool verbose = 102 [default = false];
    if (has_verbose()) {
      total_size += 2 + 1;
    }

    // optional bool scaled_termination = 103 [default = true];
    if (has_scaled_termination()) {
      total_size += 2 + 1;
    }

    // optional bool warm_start = 104 [default = true];
    if (has_warm_start()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int32 print_level = 200 [default = 0];
    if (has_print_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_level());
    }

    // optional int32 max_num_of_iterations = 201 [default = 500];
    if (has_max_num_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 202 [default = 15];
    if (has_acceptable_num_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptable_num_of_iterations());
    }

    // optional double tol = 203 [default = 1e-08];
    if (has_tol()) {
      total_size += 2 + 8;
    }

    // optional double acceptable_tol = 204 [default = 0.1];
    if (has_acceptable_tol()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmootherConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmootherConfig)
    MergeFrom(*source);
  }
}

void SmootherConfig::MergeFrom(const SmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmootherConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight_fem_pos_deviation()) {
      set_weight_fem_pos_deviation(from.weight_fem_pos_deviation());
    }
    if (from.has_weight_ref_deviation()) {
      set_weight_ref_deviation(from.weight_ref_deviation());
    }
    if (from.has_weight_path_length()) {
      set_weight_path_length(from.weight_path_length());
    }
    if (from.has_apply_curvature_constraint()) {
      set_apply_curvature_constraint(from.apply_curvature_constraint());
    }
    if (from.has_weight_curvature_constraint_slack_var()) {
      set_weight_curvature_constraint_slack_var(from.weight_curvature_constraint_slack_var());
    }
    if (from.has_curvature_constraint()) {
      set_curvature_constraint(from.curvature_constraint());
    }
    if (from.has_use_sqp()) {
      set_use_sqp(from.use_sqp());
    }
    if (from.has_sqp_ftol()) {
      set_sqp_ftol(from.sqp_ftol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sqp_ctol()) {
      set_sqp_ctol(from.sqp_ctol());
    }
    if (from.has_sqp_pen_max_iter()) {
      set_sqp_pen_max_iter(from.sqp_pen_max_iter());
    }
    if (from.has_sqp_sub_max_iter()) {
      set_sqp_sub_max_iter(from.sqp_sub_max_iter());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_time_limit()) {
      set_time_limit(from.time_limit());
    }
    if (from.has_verbose()) {
      set_verbose(from.verbose());
    }
    if (from.has_scaled_termination()) {
      set_scaled_termination(from.scaled_termination());
    }
    if (from.has_warm_start()) {
      set_warm_start(from.warm_start());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_print_level()) {
      set_print_level(from.print_level());
    }
    if (from.has_max_num_of_iterations()) {
      set_max_num_of_iterations(from.max_num_of_iterations());
    }
    if (from.has_acceptable_num_of_iterations()) {
      set_acceptable_num_of_iterations(from.acceptable_num_of_iterations());
    }
    if (from.has_tol()) {
      set_tol(from.tol());
    }
    if (from.has_acceptable_tol()) {
      set_acceptable_tol(from.acceptable_tol());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmootherConfig::CopyFrom(const SmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmootherConfig::IsInitialized() const {

  return true;
}

void SmootherConfig::Swap(SmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmootherConfig::InternalSwap(SmootherConfig* other) {
  std::swap(weight_fem_pos_deviation_, other->weight_fem_pos_deviation_);
  std::swap(weight_ref_deviation_, other->weight_ref_deviation_);
  std::swap(weight_path_length_, other->weight_path_length_);
  std::swap(apply_curvature_constraint_, other->apply_curvature_constraint_);
  std::swap(weight_curvature_constraint_slack_var_, other->weight_curvature_constraint_slack_var_);
  std::swap(curvature_constraint_, other->curvature_constraint_);
  std::swap(use_sqp_, other->use_sqp_);
  std::swap(sqp_ftol_, other->sqp_ftol_);
  std::swap(sqp_ctol_, other->sqp_ctol_);
  std::swap(sqp_pen_max_iter_, other->sqp_pen_max_iter_);
  std::swap(sqp_sub_max_iter_, other->sqp_sub_max_iter_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(time_limit_, other->time_limit_);
  std::swap(verbose_, other->verbose_);
  std::swap(scaled_termination_, other->scaled_termination_);
  std::swap(warm_start_, other->warm_start_);
  std::swap(print_level_, other->print_level_);
  std::swap(max_num_of_iterations_, other->max_num_of_iterations_);
  std::swap(acceptable_num_of_iterations_, other->acceptable_num_of_iterations_);
  std::swap(tol_, other->tol_);
  std::swap(acceptable_tol_, other->acceptable_tol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmootherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmootherConfig_descriptor_;
  metadata.reflection = SmootherConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmootherConfig

// optional double weight_fem_pos_deviation = 2 [default = 10000000000];
bool SmootherConfig::has_weight_fem_pos_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmootherConfig::set_has_weight_fem_pos_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
void SmootherConfig::clear_has_weight_fem_pos_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmootherConfig::clear_weight_fem_pos_deviation() {
  weight_fem_pos_deviation_ = 10000000000;
  clear_has_weight_fem_pos_deviation();
}
 double SmootherConfig::weight_fem_pos_deviation() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_fem_pos_deviation)
  return weight_fem_pos_deviation_;
}
 void SmootherConfig::set_weight_fem_pos_deviation(double value) {
  set_has_weight_fem_pos_deviation();
  weight_fem_pos_deviation_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_fem_pos_deviation)
}

// optional double weight_ref_deviation = 3 [default = 1];
bool SmootherConfig::has_weight_ref_deviation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmootherConfig::set_has_weight_ref_deviation() {
  _has_bits_[0] |= 0x00000002u;
}
void SmootherConfig::clear_has_weight_ref_deviation() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmootherConfig::clear_weight_ref_deviation() {
  weight_ref_deviation_ = 1;
  clear_has_weight_ref_deviation();
}
 double SmootherConfig::weight_ref_deviation() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_ref_deviation)
  return weight_ref_deviation_;
}
 void SmootherConfig::set_weight_ref_deviation(double value) {
  set_has_weight_ref_deviation();
  weight_ref_deviation_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_ref_deviation)
}

// optional double weight_path_length = 4 [default = 1];
bool SmootherConfig::has_weight_path_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmootherConfig::set_has_weight_path_length() {
  _has_bits_[0] |= 0x00000004u;
}
void SmootherConfig::clear_has_weight_path_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmootherConfig::clear_weight_path_length() {
  weight_path_length_ = 1;
  clear_has_weight_path_length();
}
 double SmootherConfig::weight_path_length() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_path_length)
  return weight_path_length_;
}
 void SmootherConfig::set_weight_path_length(double value) {
  set_has_weight_path_length();
  weight_path_length_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_path_length)
}

// optional bool apply_curvature_constraint = 5 [default = false];
bool SmootherConfig::has_apply_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SmootherConfig::set_has_apply_curvature_constraint() {
  _has_bits_[0] |= 0x00000008u;
}
void SmootherConfig::clear_has_apply_curvature_constraint() {
  _has_bits_[0] &= ~0x00000008u;
}
void SmootherConfig::clear_apply_curvature_constraint() {
  apply_curvature_constraint_ = false;
  clear_has_apply_curvature_constraint();
}
 bool SmootherConfig::apply_curvature_constraint() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.apply_curvature_constraint)
  return apply_curvature_constraint_;
}
 void SmootherConfig::set_apply_curvature_constraint(bool value) {
  set_has_apply_curvature_constraint();
  apply_curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.apply_curvature_constraint)
}

// optional double weight_curvature_constraint_slack_var = 6 [default = 100];
bool SmootherConfig::has_weight_curvature_constraint_slack_var() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SmootherConfig::set_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] |= 0x00000010u;
}
void SmootherConfig::clear_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] &= ~0x00000010u;
}
void SmootherConfig::clear_weight_curvature_constraint_slack_var() {
  weight_curvature_constraint_slack_var_ = 100;
  clear_has_weight_curvature_constraint_slack_var();
}
 double SmootherConfig::weight_curvature_constraint_slack_var() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_curvature_constraint_slack_var)
  return weight_curvature_constraint_slack_var_;
}
 void SmootherConfig::set_weight_curvature_constraint_slack_var(double value) {
  set_has_weight_curvature_constraint_slack_var();
  weight_curvature_constraint_slack_var_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_curvature_constraint_slack_var)
}

// optional double curvature_constraint = 7 [default = 0.2];
bool SmootherConfig::has_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SmootherConfig::set_has_curvature_constraint() {
  _has_bits_[0] |= 0x00000020u;
}
void SmootherConfig::clear_has_curvature_constraint() {
  _has_bits_[0] &= ~0x00000020u;
}
void SmootherConfig::clear_curvature_constraint() {
  curvature_constraint_ = 0.2;
  clear_has_curvature_constraint();
}
 double SmootherConfig::curvature_constraint() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.curvature_constraint)
  return curvature_constraint_;
}
 void SmootherConfig::set_curvature_constraint(double value) {
  set_has_curvature_constraint();
  curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.curvature_constraint)
}

// optional bool use_sqp = 8 [default = false];
bool SmootherConfig::has_use_sqp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SmootherConfig::set_has_use_sqp() {
  _has_bits_[0] |= 0x00000040u;
}
void SmootherConfig::clear_has_use_sqp() {
  _has_bits_[0] &= ~0x00000040u;
}
void SmootherConfig::clear_use_sqp() {
  use_sqp_ = false;
  clear_has_use_sqp();
}
 bool SmootherConfig::use_sqp() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.use_sqp)
  return use_sqp_;
}
 void SmootherConfig::set_use_sqp(bool value) {
  set_has_use_sqp();
  use_sqp_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.use_sqp)
}

// optional double sqp_ftol = 9 [default = 0.0001];
bool SmootherConfig::has_sqp_ftol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SmootherConfig::set_has_sqp_ftol() {
  _has_bits_[0] |= 0x00000080u;
}
void SmootherConfig::clear_has_sqp_ftol() {
  _has_bits_[0] &= ~0x00000080u;
}
void SmootherConfig::clear_sqp_ftol() {
  sqp_ftol_ = 0.0001;
  clear_has_sqp_ftol();
}
 double SmootherConfig::sqp_ftol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_ftol)
  return sqp_ftol_;
}
 void SmootherConfig::set_sqp_ftol(double value) {
  set_has_sqp_ftol();
  sqp_ftol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_ftol)
}

// optional double sqp_ctol = 10 [default = 0.001];
bool SmootherConfig::has_sqp_ctol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SmootherConfig::set_has_sqp_ctol() {
  _has_bits_[0] |= 0x00000100u;
}
void SmootherConfig::clear_has_sqp_ctol() {
  _has_bits_[0] &= ~0x00000100u;
}
void SmootherConfig::clear_sqp_ctol() {
  sqp_ctol_ = 0.001;
  clear_has_sqp_ctol();
}
 double SmootherConfig::sqp_ctol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_ctol)
  return sqp_ctol_;
}
 void SmootherConfig::set_sqp_ctol(double value) {
  set_has_sqp_ctol();
  sqp_ctol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_ctol)
}

// optional int32 sqp_pen_max_iter = 11 [default = 10];
bool SmootherConfig::has_sqp_pen_max_iter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SmootherConfig::set_has_sqp_pen_max_iter() {
  _has_bits_[0] |= 0x00000200u;
}
void SmootherConfig::clear_has_sqp_pen_max_iter() {
  _has_bits_[0] &= ~0x00000200u;
}
void SmootherConfig::clear_sqp_pen_max_iter() {
  sqp_pen_max_iter_ = 10;
  clear_has_sqp_pen_max_iter();
}
 ::google::protobuf::int32 SmootherConfig::sqp_pen_max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_pen_max_iter)
  return sqp_pen_max_iter_;
}
 void SmootherConfig::set_sqp_pen_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_pen_max_iter();
  sqp_pen_max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_pen_max_iter)
}

// optional int32 sqp_sub_max_iter = 12 [default = 100];
bool SmootherConfig::has_sqp_sub_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SmootherConfig::set_has_sqp_sub_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
void SmootherConfig::clear_has_sqp_sub_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
void SmootherConfig::clear_sqp_sub_max_iter() {
  sqp_sub_max_iter_ = 100;
  clear_has_sqp_sub_max_iter();
}
 ::google::protobuf::int32 SmootherConfig::sqp_sub_max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_sub_max_iter)
  return sqp_sub_max_iter_;
}
 void SmootherConfig::set_sqp_sub_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_sub_max_iter();
  sqp_sub_max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_sub_max_iter)
}

// optional int32 max_iter = 100 [default = 500];
bool SmootherConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SmootherConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000800u;
}
void SmootherConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000800u;
}
void SmootherConfig::clear_max_iter() {
  max_iter_ = 500;
  clear_has_max_iter();
}
 ::google::protobuf::int32 SmootherConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.max_iter)
  return max_iter_;
}
 void SmootherConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.max_iter)
}

// optional double time_limit = 101 [default = 0];
bool SmootherConfig::has_time_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SmootherConfig::set_has_time_limit() {
  _has_bits_[0] |= 0x00001000u;
}
void SmootherConfig::clear_has_time_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
void SmootherConfig::clear_time_limit() {
  time_limit_ = 0;
  clear_has_time_limit();
}
 double SmootherConfig::time_limit() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.time_limit)
  return time_limit_;
}
 void SmootherConfig::set_time_limit(double value) {
  set_has_time_limit();
  time_limit_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.time_limit)
}

// optional bool verbose = 102 [default = false];
bool SmootherConfig::has_verbose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SmootherConfig::set_has_verbose() {
  _has_bits_[0] |= 0x00002000u;
}
void SmootherConfig::clear_has_verbose() {
  _has_bits_[0] &= ~0x00002000u;
}
void SmootherConfig::clear_verbose() {
  verbose_ = false;
  clear_has_verbose();
}
 bool SmootherConfig::verbose() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.verbose)
  return verbose_;
}
 void SmootherConfig::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.verbose)
}

// optional bool scaled_termination = 103 [default = true];
bool SmootherConfig::has_scaled_termination() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SmootherConfig::set_has_scaled_termination() {
  _has_bits_[0] |= 0x00004000u;
}
void SmootherConfig::clear_has_scaled_termination() {
  _has_bits_[0] &= ~0x00004000u;
}
void SmootherConfig::clear_scaled_termination() {
  scaled_termination_ = true;
  clear_has_scaled_termination();
}
 bool SmootherConfig::scaled_termination() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.scaled_termination)
  return scaled_termination_;
}
 void SmootherConfig::set_scaled_termination(bool value) {
  set_has_scaled_termination();
  scaled_termination_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.scaled_termination)
}

// optional bool warm_start = 104 [default = true];
bool SmootherConfig::has_warm_start() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SmootherConfig::set_has_warm_start() {
  _has_bits_[0] |= 0x00008000u;
}
void SmootherConfig::clear_has_warm_start() {
  _has_bits_[0] &= ~0x00008000u;
}
void SmootherConfig::clear_warm_start() {
  warm_start_ = true;
  clear_has_warm_start();
}
 bool SmootherConfig::warm_start() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.warm_start)
  return warm_start_;
}
 void SmootherConfig::set_warm_start(bool value) {
  set_has_warm_start();
  warm_start_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.warm_start)
}

// optional int32 print_level = 200 [default = 0];
bool SmootherConfig::has_print_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SmootherConfig::set_has_print_level() {
  _has_bits_[0] |= 0x00010000u;
}
void SmootherConfig::clear_has_print_level() {
  _has_bits_[0] &= ~0x00010000u;
}
void SmootherConfig::clear_print_level() {
  print_level_ = 0;
  clear_has_print_level();
}
 ::google::protobuf::int32 SmootherConfig::print_level() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.print_level)
  return print_level_;
}
 void SmootherConfig::set_print_level(::google::protobuf::int32 value) {
  set_has_print_level();
  print_level_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.print_level)
}

// optional int32 max_num_of_iterations = 201 [default = 500];
bool SmootherConfig::has_max_num_of_iterations() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SmootherConfig::set_has_max_num_of_iterations() {
  _has_bits_[0] |= 0x00020000u;
}
void SmootherConfig::clear_has_max_num_of_iterations() {
  _has_bits_[0] &= ~0x00020000u;
}
void SmootherConfig::clear_max_num_of_iterations() {
  max_num_of_iterations_ = 500;
  clear_has_max_num_of_iterations();
}
 ::google::protobuf::int32 SmootherConfig::max_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.max_num_of_iterations)
  return max_num_of_iterations_;
}
 void SmootherConfig::set_max_num_of_iterations(::google::protobuf::int32 value) {
  set_has_max_num_of_iterations();
  max_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.max_num_of_iterations)
}

// optional int32 acceptable_num_of_iterations = 202 [default = 15];
bool SmootherConfig::has_acceptable_num_of_iterations() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SmootherConfig::set_has_acceptable_num_of_iterations() {
  _has_bits_[0] |= 0x00040000u;
}
void SmootherConfig::clear_has_acceptable_num_of_iterations() {
  _has_bits_[0] &= ~0x00040000u;
}
void SmootherConfig::clear_acceptable_num_of_iterations() {
  acceptable_num_of_iterations_ = 15;
  clear_has_acceptable_num_of_iterations();
}
 ::google::protobuf::int32 SmootherConfig::acceptable_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.acceptable_num_of_iterations)
  return acceptable_num_of_iterations_;
}
 void SmootherConfig::set_acceptable_num_of_iterations(::google::protobuf::int32 value) {
  set_has_acceptable_num_of_iterations();
  acceptable_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.acceptable_num_of_iterations)
}

// optional double tol = 203 [default = 1e-08];
bool SmootherConfig::has_tol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SmootherConfig::set_has_tol() {
  _has_bits_[0] |= 0x00080000u;
}
void SmootherConfig::clear_has_tol() {
  _has_bits_[0] &= ~0x00080000u;
}
void SmootherConfig::clear_tol() {
  tol_ = 1e-08;
  clear_has_tol();
}
 double SmootherConfig::tol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.tol)
  return tol_;
}
 void SmootherConfig::set_tol(double value) {
  set_has_tol();
  tol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.tol)
}

// optional double acceptable_tol = 204 [default = 0.1];
bool SmootherConfig::has_acceptable_tol() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SmootherConfig::set_has_acceptable_tol() {
  _has_bits_[0] |= 0x00100000u;
}
void SmootherConfig::clear_has_acceptable_tol() {
  _has_bits_[0] &= ~0x00100000u;
}
void SmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0.1;
  clear_has_acceptable_tol();
}
 double SmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.acceptable_tol)
  return acceptable_tol_;
}
 void SmootherConfig::set_acceptable_tol(double value) {
  set_has_acceptable_tol();
  acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.acceptable_tol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
