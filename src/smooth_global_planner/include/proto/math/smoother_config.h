// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smoother_config.proto

#ifndef PROTOBUF_smoother_5fconfig_2eproto__INCLUDED
#define PROTOBUF_smoother_5fconfig_2eproto__INCLUDED

#include <string>
#include <functional>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_smoother_5fconfig_2eproto();
void protobuf_AssignDesc_smoother_5fconfig_2eproto();
void protobuf_ShutdownFile_smoother_5fconfig_2eproto();

class SmootherConfig;

// ===================================================================

class SmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SmootherConfig) */ {
 public:
  SmootherConfig();
  virtual ~SmootherConfig();

  SmootherConfig(const SmootherConfig& from);

  inline SmootherConfig& operator=(const SmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  bool SmootherConfigParser(const std::string &filename, 
                            const std::string& classname,
                            std::function<void(::google::protobuf::Message* msg)> cb);

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmootherConfig& default_instance();

  void Swap(SmootherConfig* other);

  // implements Message ----------------------------------------------

  inline SmootherConfig* New() const { return New(NULL); }

  SmootherConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmootherConfig& from);
  void MergeFrom(const SmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  bool has_weight_fem_pos_deviation() const;
  void clear_weight_fem_pos_deviation();
  static const int kWeightFemPosDeviationFieldNumber = 2;
  double weight_fem_pos_deviation() const;
  void set_weight_fem_pos_deviation(double value);

  // optional double weight_ref_deviation = 3 [default = 1];
  bool has_weight_ref_deviation() const;
  void clear_weight_ref_deviation();
  static const int kWeightRefDeviationFieldNumber = 3;
  double weight_ref_deviation() const;
  void set_weight_ref_deviation(double value);

  // optional double weight_path_length = 4 [default = 1];
  bool has_weight_path_length() const;
  void clear_weight_path_length();
  static const int kWeightPathLengthFieldNumber = 4;
  double weight_path_length() const;
  void set_weight_path_length(double value);

  // optional bool apply_curvature_constraint = 5 [default = false];
  bool has_apply_curvature_constraint() const;
  void clear_apply_curvature_constraint();
  static const int kApplyCurvatureConstraintFieldNumber = 5;
  bool apply_curvature_constraint() const;
  void set_apply_curvature_constraint(bool value);

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  bool has_weight_curvature_constraint_slack_var() const;
  void clear_weight_curvature_constraint_slack_var();
  static const int kWeightCurvatureConstraintSlackVarFieldNumber = 6;
  double weight_curvature_constraint_slack_var() const;
  void set_weight_curvature_constraint_slack_var(double value);

  // optional double curvature_constraint = 7 [default = 0.2];
  bool has_curvature_constraint() const;
  void clear_curvature_constraint();
  static const int kCurvatureConstraintFieldNumber = 7;
  double curvature_constraint() const;
  void set_curvature_constraint(double value);

  // optional bool use_sqp = 8 [default = false];
  bool has_use_sqp() const;
  void clear_use_sqp();
  static const int kUseSqpFieldNumber = 8;
  bool use_sqp() const;
  void set_use_sqp(bool value);

  // optional double sqp_ftol = 9 [default = 0.0001];
  bool has_sqp_ftol() const;
  void clear_sqp_ftol();
  static const int kSqpFtolFieldNumber = 9;
  double sqp_ftol() const;
  void set_sqp_ftol(double value);

  // optional double sqp_ctol = 10 [default = 0.001];
  bool has_sqp_ctol() const;
  void clear_sqp_ctol();
  static const int kSqpCtolFieldNumber = 10;
  double sqp_ctol() const;
  void set_sqp_ctol(double value);

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  bool has_sqp_pen_max_iter() const;
  void clear_sqp_pen_max_iter();
  static const int kSqpPenMaxIterFieldNumber = 11;
  ::google::protobuf::int32 sqp_pen_max_iter() const;
  void set_sqp_pen_max_iter(::google::protobuf::int32 value);

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  bool has_sqp_sub_max_iter() const;
  void clear_sqp_sub_max_iter();
  static const int kSqpSubMaxIterFieldNumber = 12;
  ::google::protobuf::int32 sqp_sub_max_iter() const;
  void set_sqp_sub_max_iter(::google::protobuf::int32 value);

  // optional int32 max_iter = 100 [default = 500];
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 100;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional double time_limit = 101 [default = 0];
  bool has_time_limit() const;
  void clear_time_limit();
  static const int kTimeLimitFieldNumber = 101;
  double time_limit() const;
  void set_time_limit(double value);

  // optional bool verbose = 102 [default = false];
  bool has_verbose() const;
  void clear_verbose();
  static const int kVerboseFieldNumber = 102;
  bool verbose() const;
  void set_verbose(bool value);

  // optional bool scaled_termination = 103 [default = true];
  bool has_scaled_termination() const;
  void clear_scaled_termination();
  static const int kScaledTerminationFieldNumber = 103;
  bool scaled_termination() const;
  void set_scaled_termination(bool value);

  // optional bool warm_start = 104 [default = true];
  bool has_warm_start() const;
  void clear_warm_start();
  static const int kWarmStartFieldNumber = 104;
  bool warm_start() const;
  void set_warm_start(bool value);

  // optional int32 print_level = 200 [default = 0];
  bool has_print_level() const;
  void clear_print_level();
  static const int kPrintLevelFieldNumber = 200;
  ::google::protobuf::int32 print_level() const;
  void set_print_level(::google::protobuf::int32 value);

  // optional int32 max_num_of_iterations = 201 [default = 500];
  bool has_max_num_of_iterations() const;
  void clear_max_num_of_iterations();
  static const int kMaxNumOfIterationsFieldNumber = 201;
  ::google::protobuf::int32 max_num_of_iterations() const;
  void set_max_num_of_iterations(::google::protobuf::int32 value);

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  bool has_acceptable_num_of_iterations() const;
  void clear_acceptable_num_of_iterations();
  static const int kAcceptableNumOfIterationsFieldNumber = 202;
  ::google::protobuf::int32 acceptable_num_of_iterations() const;
  void set_acceptable_num_of_iterations(::google::protobuf::int32 value);

  // optional double tol = 203 [default = 1e-08];
  bool has_tol() const;
  void clear_tol();
  static const int kTolFieldNumber = 203;
  double tol() const;
  void set_tol(double value);

  // optional double acceptable_tol = 204 [default = 0.1];
  bool has_acceptable_tol() const;
  void clear_acceptable_tol();
  static const int kAcceptableTolFieldNumber = 204;
  double acceptable_tol() const;
  void set_acceptable_tol(double value);

  // @@protoc_insertion_point(class_scope:SmootherConfig)
 private:
  inline void set_has_weight_fem_pos_deviation();
  inline void clear_has_weight_fem_pos_deviation();
  inline void set_has_weight_ref_deviation();
  inline void clear_has_weight_ref_deviation();
  inline void set_has_weight_path_length();
  inline void clear_has_weight_path_length();
  inline void set_has_apply_curvature_constraint();
  inline void clear_has_apply_curvature_constraint();
  inline void set_has_weight_curvature_constraint_slack_var();
  inline void clear_has_weight_curvature_constraint_slack_var();
  inline void set_has_curvature_constraint();
  inline void clear_has_curvature_constraint();
  inline void set_has_use_sqp();
  inline void clear_has_use_sqp();
  inline void set_has_sqp_ftol();
  inline void clear_has_sqp_ftol();
  inline void set_has_sqp_ctol();
  inline void clear_has_sqp_ctol();
  inline void set_has_sqp_pen_max_iter();
  inline void clear_has_sqp_pen_max_iter();
  inline void set_has_sqp_sub_max_iter();
  inline void clear_has_sqp_sub_max_iter();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_time_limit();
  inline void clear_has_time_limit();
  inline void set_has_verbose();
  inline void clear_has_verbose();
  inline void set_has_scaled_termination();
  inline void clear_has_scaled_termination();
  inline void set_has_warm_start();
  inline void clear_has_warm_start();
  inline void set_has_print_level();
  inline void clear_has_print_level();
  inline void set_has_max_num_of_iterations();
  inline void clear_has_max_num_of_iterations();
  inline void set_has_acceptable_num_of_iterations();
  inline void clear_has_acceptable_num_of_iterations();
  inline void set_has_tol();
  inline void clear_has_tol();
  inline void set_has_acceptable_tol();
  inline void clear_has_acceptable_tol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double weight_fem_pos_deviation_;
  double weight_ref_deviation_;
  double weight_path_length_;
  double weight_curvature_constraint_slack_var_;
  double curvature_constraint_;
  double sqp_ftol_;
  double sqp_ctol_;
  ::google::protobuf::int32 sqp_pen_max_iter_;
  bool apply_curvature_constraint_;
  bool use_sqp_;
  bool verbose_;
  bool scaled_termination_;
  ::google::protobuf::int32 sqp_sub_max_iter_;
  ::google::protobuf::int32 max_iter_;
  double time_limit_;
  bool warm_start_;
  ::google::protobuf::int32 print_level_;
  ::google::protobuf::int32 max_num_of_iterations_;
  ::google::protobuf::int32 acceptable_num_of_iterations_;
  double tol_;
  double acceptable_tol_;
  friend void  protobuf_AddDesc_smoother_5fconfig_2eproto();
  friend void protobuf_AssignDesc_smoother_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_smoother_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SmootherConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SmootherConfig

// optional double weight_fem_pos_deviation = 2 [default = 10000000000];
inline bool SmootherConfig::has_weight_fem_pos_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmootherConfig::set_has_weight_fem_pos_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmootherConfig::clear_has_weight_fem_pos_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmootherConfig::clear_weight_fem_pos_deviation() {
  weight_fem_pos_deviation_ = 10000000000;
  clear_has_weight_fem_pos_deviation();
}
inline double SmootherConfig::weight_fem_pos_deviation() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_fem_pos_deviation)
  return weight_fem_pos_deviation_;
}
inline void SmootherConfig::set_weight_fem_pos_deviation(double value) {
  set_has_weight_fem_pos_deviation();
  weight_fem_pos_deviation_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_fem_pos_deviation)
}

// optional double weight_ref_deviation = 3 [default = 1];
inline bool SmootherConfig::has_weight_ref_deviation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmootherConfig::set_has_weight_ref_deviation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmootherConfig::clear_has_weight_ref_deviation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmootherConfig::clear_weight_ref_deviation() {
  weight_ref_deviation_ = 1;
  clear_has_weight_ref_deviation();
}
inline double SmootherConfig::weight_ref_deviation() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_ref_deviation)
  return weight_ref_deviation_;
}
inline void SmootherConfig::set_weight_ref_deviation(double value) {
  set_has_weight_ref_deviation();
  weight_ref_deviation_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_ref_deviation)
}

// optional double weight_path_length = 4 [default = 1];
inline bool SmootherConfig::has_weight_path_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmootherConfig::set_has_weight_path_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmootherConfig::clear_has_weight_path_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmootherConfig::clear_weight_path_length() {
  weight_path_length_ = 1;
  clear_has_weight_path_length();
}
inline double SmootherConfig::weight_path_length() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_path_length)
  return weight_path_length_;
}
inline void SmootherConfig::set_weight_path_length(double value) {
  set_has_weight_path_length();
  weight_path_length_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_path_length)
}

// optional bool apply_curvature_constraint = 5 [default = false];
inline bool SmootherConfig::has_apply_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmootherConfig::set_has_apply_curvature_constraint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmootherConfig::clear_has_apply_curvature_constraint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmootherConfig::clear_apply_curvature_constraint() {
  apply_curvature_constraint_ = false;
  clear_has_apply_curvature_constraint();
}
inline bool SmootherConfig::apply_curvature_constraint() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.apply_curvature_constraint)
  return apply_curvature_constraint_;
}
inline void SmootherConfig::set_apply_curvature_constraint(bool value) {
  set_has_apply_curvature_constraint();
  apply_curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.apply_curvature_constraint)
}

// optional double weight_curvature_constraint_slack_var = 6 [default = 100];
inline bool SmootherConfig::has_weight_curvature_constraint_slack_var() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmootherConfig::set_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SmootherConfig::clear_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SmootherConfig::clear_weight_curvature_constraint_slack_var() {
  weight_curvature_constraint_slack_var_ = 100;
  clear_has_weight_curvature_constraint_slack_var();
}
inline double SmootherConfig::weight_curvature_constraint_slack_var() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.weight_curvature_constraint_slack_var)
  return weight_curvature_constraint_slack_var_;
}
inline void SmootherConfig::set_weight_curvature_constraint_slack_var(double value) {
  set_has_weight_curvature_constraint_slack_var();
  weight_curvature_constraint_slack_var_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.weight_curvature_constraint_slack_var)
}

// optional double curvature_constraint = 7 [default = 0.2];
inline bool SmootherConfig::has_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmootherConfig::set_has_curvature_constraint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SmootherConfig::clear_has_curvature_constraint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SmootherConfig::clear_curvature_constraint() {
  curvature_constraint_ = 0.2;
  clear_has_curvature_constraint();
}
inline double SmootherConfig::curvature_constraint() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.curvature_constraint)
  return curvature_constraint_;
}
inline void SmootherConfig::set_curvature_constraint(double value) {
  set_has_curvature_constraint();
  curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.curvature_constraint)
}

// optional bool use_sqp = 8 [default = false];
inline bool SmootherConfig::has_use_sqp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SmootherConfig::set_has_use_sqp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SmootherConfig::clear_has_use_sqp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SmootherConfig::clear_use_sqp() {
  use_sqp_ = false;
  clear_has_use_sqp();
}
inline bool SmootherConfig::use_sqp() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.use_sqp)
  return use_sqp_;
}
inline void SmootherConfig::set_use_sqp(bool value) {
  set_has_use_sqp();
  use_sqp_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.use_sqp)
}

// optional double sqp_ftol = 9 [default = 0.0001];
inline bool SmootherConfig::has_sqp_ftol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SmootherConfig::set_has_sqp_ftol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SmootherConfig::clear_has_sqp_ftol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SmootherConfig::clear_sqp_ftol() {
  sqp_ftol_ = 0.0001;
  clear_has_sqp_ftol();
}
inline double SmootherConfig::sqp_ftol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_ftol)
  return sqp_ftol_;
}
inline void SmootherConfig::set_sqp_ftol(double value) {
  set_has_sqp_ftol();
  sqp_ftol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_ftol)
}

// optional double sqp_ctol = 10 [default = 0.001];
inline bool SmootherConfig::has_sqp_ctol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SmootherConfig::set_has_sqp_ctol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SmootherConfig::clear_has_sqp_ctol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SmootherConfig::clear_sqp_ctol() {
  sqp_ctol_ = 0.001;
  clear_has_sqp_ctol();
}
inline double SmootherConfig::sqp_ctol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_ctol)
  return sqp_ctol_;
}
inline void SmootherConfig::set_sqp_ctol(double value) {
  set_has_sqp_ctol();
  sqp_ctol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_ctol)
}

// optional int32 sqp_pen_max_iter = 11 [default = 10];
inline bool SmootherConfig::has_sqp_pen_max_iter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SmootherConfig::set_has_sqp_pen_max_iter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SmootherConfig::clear_has_sqp_pen_max_iter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SmootherConfig::clear_sqp_pen_max_iter() {
  sqp_pen_max_iter_ = 10;
  clear_has_sqp_pen_max_iter();
}
inline ::google::protobuf::int32 SmootherConfig::sqp_pen_max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_pen_max_iter)
  return sqp_pen_max_iter_;
}
inline void SmootherConfig::set_sqp_pen_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_pen_max_iter();
  sqp_pen_max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_pen_max_iter)
}

// optional int32 sqp_sub_max_iter = 12 [default = 100];
inline bool SmootherConfig::has_sqp_sub_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SmootherConfig::set_has_sqp_sub_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SmootherConfig::clear_has_sqp_sub_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SmootherConfig::clear_sqp_sub_max_iter() {
  sqp_sub_max_iter_ = 100;
  clear_has_sqp_sub_max_iter();
}
inline ::google::protobuf::int32 SmootherConfig::sqp_sub_max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.sqp_sub_max_iter)
  return sqp_sub_max_iter_;
}
inline void SmootherConfig::set_sqp_sub_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_sub_max_iter();
  sqp_sub_max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.sqp_sub_max_iter)
}

// optional int32 max_iter = 100 [default = 500];
inline bool SmootherConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SmootherConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SmootherConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SmootherConfig::clear_max_iter() {
  max_iter_ = 500;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SmootherConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.max_iter)
  return max_iter_;
}
inline void SmootherConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.max_iter)
}

// optional double time_limit = 101 [default = 0];
inline bool SmootherConfig::has_time_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SmootherConfig::set_has_time_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SmootherConfig::clear_has_time_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SmootherConfig::clear_time_limit() {
  time_limit_ = 0;
  clear_has_time_limit();
}
inline double SmootherConfig::time_limit() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.time_limit)
  return time_limit_;
}
inline void SmootherConfig::set_time_limit(double value) {
  set_has_time_limit();
  time_limit_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.time_limit)
}

// optional bool verbose = 102 [default = false];
inline bool SmootherConfig::has_verbose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SmootherConfig::set_has_verbose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SmootherConfig::clear_has_verbose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SmootherConfig::clear_verbose() {
  verbose_ = false;
  clear_has_verbose();
}
inline bool SmootherConfig::verbose() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.verbose)
  return verbose_;
}
inline void SmootherConfig::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.verbose)
}

// optional bool scaled_termination = 103 [default = true];
inline bool SmootherConfig::has_scaled_termination() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SmootherConfig::set_has_scaled_termination() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SmootherConfig::clear_has_scaled_termination() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SmootherConfig::clear_scaled_termination() {
  scaled_termination_ = true;
  clear_has_scaled_termination();
}
inline bool SmootherConfig::scaled_termination() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.scaled_termination)
  return scaled_termination_;
}
inline void SmootherConfig::set_scaled_termination(bool value) {
  set_has_scaled_termination();
  scaled_termination_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.scaled_termination)
}

// optional bool warm_start = 104 [default = true];
inline bool SmootherConfig::has_warm_start() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SmootherConfig::set_has_warm_start() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SmootherConfig::clear_has_warm_start() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SmootherConfig::clear_warm_start() {
  warm_start_ = true;
  clear_has_warm_start();
}
inline bool SmootherConfig::warm_start() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.warm_start)
  return warm_start_;
}
inline void SmootherConfig::set_warm_start(bool value) {
  set_has_warm_start();
  warm_start_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.warm_start)
}

// optional int32 print_level = 200 [default = 0];
inline bool SmootherConfig::has_print_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SmootherConfig::set_has_print_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SmootherConfig::clear_has_print_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SmootherConfig::clear_print_level() {
  print_level_ = 0;
  clear_has_print_level();
}
inline ::google::protobuf::int32 SmootherConfig::print_level() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.print_level)
  return print_level_;
}
inline void SmootherConfig::set_print_level(::google::protobuf::int32 value) {
  set_has_print_level();
  print_level_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.print_level)
}

// optional int32 max_num_of_iterations = 201 [default = 500];
inline bool SmootherConfig::has_max_num_of_iterations() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SmootherConfig::set_has_max_num_of_iterations() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SmootherConfig::clear_has_max_num_of_iterations() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SmootherConfig::clear_max_num_of_iterations() {
  max_num_of_iterations_ = 500;
  clear_has_max_num_of_iterations();
}
inline ::google::protobuf::int32 SmootherConfig::max_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.max_num_of_iterations)
  return max_num_of_iterations_;
}
inline void SmootherConfig::set_max_num_of_iterations(::google::protobuf::int32 value) {
  set_has_max_num_of_iterations();
  max_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.max_num_of_iterations)
}

// optional int32 acceptable_num_of_iterations = 202 [default = 15];
inline bool SmootherConfig::has_acceptable_num_of_iterations() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SmootherConfig::set_has_acceptable_num_of_iterations() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SmootherConfig::clear_has_acceptable_num_of_iterations() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SmootherConfig::clear_acceptable_num_of_iterations() {
  acceptable_num_of_iterations_ = 15;
  clear_has_acceptable_num_of_iterations();
}
inline ::google::protobuf::int32 SmootherConfig::acceptable_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.acceptable_num_of_iterations)
  return acceptable_num_of_iterations_;
}
inline void SmootherConfig::set_acceptable_num_of_iterations(::google::protobuf::int32 value) {
  set_has_acceptable_num_of_iterations();
  acceptable_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.acceptable_num_of_iterations)
}

// optional double tol = 203 [default = 1e-08];
inline bool SmootherConfig::has_tol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SmootherConfig::set_has_tol() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SmootherConfig::clear_has_tol() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SmootherConfig::clear_tol() {
  tol_ = 1e-08;
  clear_has_tol();
}
inline double SmootherConfig::tol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.tol)
  return tol_;
}
inline void SmootherConfig::set_tol(double value) {
  set_has_tol();
  tol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.tol)
}

// optional double acceptable_tol = 204 [default = 0.1];
inline bool SmootherConfig::has_acceptable_tol() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SmootherConfig::set_has_acceptable_tol() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SmootherConfig::clear_has_acceptable_tol() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0.1;
  clear_has_acceptable_tol();
}
inline double SmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:SmootherConfig.acceptable_tol)
  return acceptable_tol_;
}
inline void SmootherConfig::set_acceptable_tol(double value) {
  set_has_acceptable_tol();
  acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:SmootherConfig.acceptable_tol)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_smoother_5fconfig_2eproto__INCLUDED
